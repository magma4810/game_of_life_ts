(()=>{"use strict";var e,n,r={866:()=>{function e(e,n,r){const t=`<table border=1>${n.map(((e,n)=>`<tr>${e.map(((e,r)=>1===e?`<td \n          data-x=${r}\n          data-y=${n}\n          class="cell alive" \n          style="background-color:#000000; height:10px; width:10px;"></td>`:`<td \n        data-x=${r}\n        data-y=${n}\n        class="cell dead" \n        style="background-color:#FFFFFF; height:10px; width:10px;"></td>`)).join("")}</tr>`)).join("")}</table>`;e.innerHTML=t,e.querySelector("table").addEventListener("click",(e=>{const n=e.target,t=n.getAttribute("data-x"),o=n.getAttribute("data-y");t>=0&&o>=0&&r(Number(t),Number(o))}))}function n(e,n,r){const t=e[r];if(void 0===t)return 0;const o=t[n];return void 0===o?0:o}const r=document.createElement("div");document.body.append(r),function(r){let t=!1,o=null,c=1e3,i=1e3,d=10,a=10;r.innerHTML=`Columns<button class = "minusColumns">-</button>\n    <input class = "inputColumns" style = "height:10px; width:15px">  <button class = "plusColumns">+</button><br>\n    Rows<button class = "minusRows">-</button>  <input class = "inputRows" style = "height:10px; width:15px">\n    <button class = "plusRows">+</button><br>\n    Speed<button class = "minusSpeed">-</button><u> 1 step per <u class = "second">${c/1e3}</u> second </u><button class = "plusSpeed">+</button><br>\n    <button class = "start">Start</button>\n    <button class = "enterSize">Enter size</button>  <button class="clear">Clear</button><br>\n    <div class="field-wrapper"></div>`;const u=r.querySelector(".field-wrapper"),s=r.querySelector(".start");function l(e,n){const r=[];for(let t=0;t<e;t++){r[t]=[];for(let e=0;e<n;e++)r[t][e]=0}return r}let p=l(a,d);function f(n,r){p[r][n]=0===p[r][n]?1:0,e(u,p,f)}e(u,p,f);const h=document.querySelector(".inputColumns"),m=document.querySelector(".inputRows"),v=document.querySelector(".second");function y(){h&&h&&"number"==typeof d&&(h.value=d.toString())}function b(){m&&m&&"number"==typeof a&&(m.value=a.toString())}y(),b();const g=document.querySelector(".minusColumns");g&&g.addEventListener("click",(()=>{d--,y(),p=l(a,d),e(u,p,f)}));const E=document.querySelector(".plusColumns");E&&E.addEventListener("click",(()=>{d++,y(),p=l(a,d),e(u,p,f)}));const w=document.querySelector(".minusRows");w&&w.addEventListener("click",(()=>{a--,b(),p=l(a,d),e(u,p,f)}));const _=document.querySelector(".plusRows");function k(){a=m.value,d=h.value,p=l(a,d),e(u,p,f)}_&&_.addEventListener("click",(()=>{a++,b(),p=l(a,d),e(u,p,f)}));const S=document.querySelector(".enterSize");S&&S.addEventListener("click",(()=>{k()}));const I=document.querySelector(".clear");function x(){t=!1,s.innerHTML="Start",clearInterval(o)}I&&I.addEventListener("click",(()=>{k()})),function(){const e=document.querySelector(".minusSpeed");e&&e.addEventListener("click",(()=>{i>0&&(i*=2,c+=500,v.textContent=i/1e3)}))}(),function(){const e=document.querySelector(".plusSpeed");e&&e.addEventListener("click",(()=>{i>=0&&(i/=2,c-=500,v.textContent=i/1e3)}))}(),s.addEventListener("click",(()=>{t?x():(t=!0,s.innerHTML="Stop",o=setInterval((()=>{p=function(e){return e.map(((r,t)=>r.map(((r,o)=>{const c=function(e,r,t){let o=0;for(let c=e-1;c<=e+1;c+=1)o+=Number(n(t,c,r-1));for(let c=e-1;c<=e+1;c+=1)o+=Number(n(t,c,r+1));return o+=Number(n(t,e-1,r)),o+=Number(n(t,e+1,r)),o}(o,t,e),i=n(e,o,t);var d;return 3===(d=c)?1:d>3||d<2?0:2===d&&1===i?1:0}))))}(p),e(u,p,f),function(e){for(let n=0;n<e.length;n+=1){const r=e[n];for(let e=0;e<r.length;e+=1)if(r[e])return!0}return!1}(p)||(alert("Death on the block"),x())}),c))}))}(r)}},t={};function o(e){var n=t[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var c=t[e]={exports:{}};try{var i={id:e,module:c,factory:r[e],require:o};o.i.forEach((function(e){e(i)})),c=i.module,i.factory.call(c.exports,c,c.exports,i.require)}catch(e){throw c.error=e,e}return c.exports}o.m=r,o.c=t,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"4b967a4bd9a648dfda56",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="gameoflife:",o.l=(r,t,c,i)=>{if(e[r])e[r].push(t);else{var d,a;if(void 0!==c)for(var u=document.getElementsByTagName("script"),s=0;s<u.length;s++){var l=u[s];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==n+c){d=l;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,o.nc&&d.setAttribute("nonce",o.nc),d.setAttribute("data-webpack",n+c),d.src=r),e[r]=[t];var p=(n,t)=>{d.onerror=d.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],d.parentNode&&d.parentNode.removeChild(d),o&&o.forEach((e=>e(t))),n)return n(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),a&&document.head.appendChild(d)}},(()=>{var e,n,r,t={},c=o.c,i=[],d=[],a="idle",u=0,s=[];function l(e){a=e;for(var n=[],r=0;r<d.length;r++)n[r]=d[r].call(null,e);return Promise.all(n).then((function(){}))}function p(){0==--u&&l("ready").then((function(){if(0===u){var e=s;s=[];for(var n=0;n<e.length;n++)e[n]()}}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return l("check").then(o.hmrM).then((function(r){return r?l("prepare").then((function(){var t=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,c){return o.hmrC[c](r.c,r.r,r.m,e,n,t),e}),[])).then((function(){return n=function(){return e?m(e):l("ready").then((function(){return t}))},0===u?n():new Promise((function(e){s.push((function(){e(n())}))}));var n}))})):l(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var t=n.map((function(n){return n(e)}));n=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return l("abort").then((function(){throw o[0]}));var c=l("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var i,d=l("apply"),a=function(e){i||(i=e)},u=[];return t.forEach((function(e){if(e.apply){var n=e.apply(a);if(n)for(var r=0;r<n.length;r++)u.push(n[r])}})),Promise.all([c,d]).then((function(){return i?l("fail").then((function(){throw i})):r?m(e).then((function(e){return u.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):l("idle").then((function(){return u}))}))}function v(){if(r)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,n)}))})),r=void 0,!0}o.hmrD=t,o.i.push((function(s){var m,v,y,b,g=s.module,E=function(n,r){var t=c[r];if(!t)return n;var o=function(o){if(t.hot.active){if(c[o]){var d=c[o].parents;-1===d.indexOf(r)&&d.push(r)}else i=[r],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return n(o)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&"e"!==s&&Object.defineProperty(o,s,d(s));return o.e=function(e,r){return function(e){switch(a){case"ready":l("prepare");case"prepare":return u++,e.then(p,p),e;default:return e}}(n.e(e,r))},o}(s.require,s.id);g.hot=(m=s.id,v=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=v.parents.slice(),e=y?void 0:m,o(m)},active:!0,accept:function(e,n,r){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._acceptedDependencies[e[t]]=n||function(){},b._acceptedErrorHandlers[e[t]]=r;else b._acceptedDependencies[e]=n||function(){},b._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)b._declinedDependencies[e[n]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=b._disposeHandlers.indexOf(e);n>=0&&b._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,n)})),l("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:f,apply:h,status:function(e){if(!e)return a;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var n=d.indexOf(e);n>=0&&d.splice(n,1)},data:t[m]},e=void 0,b),g.parents=i,g.children=[],i=[],s.require=E})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var t=r.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=r[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,n,r,t,c,i=o.hmrS_jsonp=o.hmrS_jsonp||{792:0},d={};function a(n,r){return e=r,new Promise(((e,r)=>{d[n]=e;var t=o.p+o.hu(n),c=new Error;o.l(t,(e=>{if(d[n]){d[n]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading hot update chunk "+n+" failed.\n("+t+": "+o+")",c.name="ChunkLoadError",c.type=t,c.request=o,r(c)}}))}))}function u(e){function d(e){for(var n=[e],r={},t=n.map((function(e){return{chain:[e],id:e}}));t.length>0;){var c=t.pop(),i=c.id,d=c.chain,u=o.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:d,moduleId:i};for(var s=0;s<u.parents.length;s++){var l=u.parents[s],p=o.c[l];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:d.concat([l]),moduleId:i,parentId:l};-1===n.indexOf(l)&&(p.hot._acceptedDependencies[i]?(r[l]||(r[l]=[]),a(r[l],[i])):(delete r[l],n.push(l),t.push({chain:d.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function a(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,n=void 0;var u={},s=[],l={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(o.o(r,f)){var h,m=r[f],v=!1,y=!1,b=!1,g="";switch((h=m?d(f):{type:"disposed",moduleId:f}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+g));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(f in l[f]=m,a(s,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,f)&&(u[f]||(u[f]=[]),a(u[f],h.outdatedDependencies[f]));b&&(a(s,[h.moduleId]),l[f]=p)}r=void 0;for(var E,w=[],_=0;_<s.length;_++){var k=s[_],S=o.c[k];S&&(S.hot._selfAccepted||S.hot._main)&&l[k]!==p&&!S.hot._selfInvalidated&&w.push({module:k,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var n,r=s.slice();r.length>0;){var c=r.pop(),d=o.c[c];if(d){var a={},l=d.hot._disposeHandlers;for(_=0;_<l.length;_++)l[_].call(null,a);for(o.hmrD[c]=a,d.hot.active=!1,delete o.c[c],delete u[c],_=0;_<d.children.length;_++){var p=o.c[d.children[_]];p&&(e=p.parents.indexOf(c))>=0&&p.parents.splice(e,1)}}}for(var f in u)if(o.o(u,f)&&(d=o.c[f]))for(E=u[f],_=0;_<E.length;_++)n=E[_],(e=d.children.indexOf(n))>=0&&d.children.splice(e,1)},apply:function(n){for(var r in l)o.o(l,r)&&(o.m[r]=l[r]);for(var t=0;t<c.length;t++)c[t](o);for(var i in u)if(o.o(u,i)){var d=o.c[i];if(d){E=u[i];for(var a=[],p=[],f=[],h=0;h<E.length;h++){var m=E[h],v=d.hot._acceptedDependencies[m],y=d.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),p.push(y),f.push(m)}}for(var b=0;b<a.length;b++)try{a[b].call(null,E)}catch(r){if("function"==typeof p[b])try{p[b](r,{moduleId:i,dependencyId:f[b]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[b],error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[b],error:r}),e.ignoreErrored||n(r)}}}for(var g=0;g<w.length;g++){var _=w[g],k=_.module;try{_.require(k)}catch(r){if("function"==typeof _.errorHandler)try{_.errorHandler(r,{moduleId:k,module:o.c[k]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:r}),e.ignoreErrored||n(r)}}return s}}}self.webpackHotUpdategameoflife=(n,t,i)=>{for(var a in t)o.o(t,a)&&(r[a]=t[a],e&&e.push(a));i&&c.push(i),d[n]&&(d[n](),d[n]=void 0)},o.hmrI.jsonp=function(e,n){r||(r={},c=[],t=[],n.push(u)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,d,s,l,p,f){p.push(u),n={},t=d,r=s.reduce((function(e,n){return e[n]=!1,e}),{}),c=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(l.push(a(e,f)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){n&&o.o(n,e)&&!n[e]&&(r.push(a(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(866)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,