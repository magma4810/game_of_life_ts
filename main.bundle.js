(()=>{"use strict";var e,r,n={866:()=>{function e(e,r,n){const t=`<table border=1>${r.map(((e,r)=>`<tr>${e.map(((e,n)=>1===e?`<td \n          data-x=${n}\n          data-y=${r}\n          class="cell alive" \n          style="background-color:#000000; height:10px; width:10px;"></td>`:`<td \n        data-x=${n}\n        data-y=${r}\n        class="cell dead" \n        style="background-color:#FFFFFF; height:10px; width:10px;"></td>`)).join("")}</tr>`)).join("")}</table>`;e.innerHTML=t,e.querySelector("table").addEventListener("click",(e=>{const r=e.target,t=r.getAttribute("data-x"),o=r.getAttribute("data-y");t>=0&&o>=0&&n(Number(t),Number(o))}))}function r(e,r,n){const t=e[n];if(void 0===t)return 0;const o=t[r];return void 0===o?0:o}const n=document.createElement("div");document.body.append(n),function(n){let t=!1,o=null,c=1e3,i=1e3,d=10,a=10;n.innerHTML=`Columns<button class = "minusColumns">-</button>\n    <input class = "inputColumns" style = "height:10px; width:15px">  <button class = "plusColumns">+</button><br>\n    Rows<button class = "minusRows">-</button>  <input class = "inputRows" style = "height:10px; width:15px">\n    <button class = "plusRows">+</button><br>\n    Speed<button class = "minusSpeed">-</button><u><u class = "speed">${c/1e3}</u> step per second</u><button class = "plusSpeed">+</button><br>\n    <button class = "start">Start</button>\n    <button class = "enterSize">Enter size</button>  <button class="clear">Clear</button><br>\n    <div class="field-wrapper"></div>`;const u=n.querySelector(".field-wrapper"),l=n.querySelector(".start");function s(e,r){const n=[];for(let t=0;t<e;t++){n[t]=[];for(let e=0;e<r;e++)n[t][e]=0}return n}let p=s(a,d);function f(r,n){p[n][r]=0===p[n][r]?1:0,e(u,p,f)}e(u,p,f);const h=document.querySelector(".inputColumns"),m=document.querySelector(".inputRows"),v=document.querySelector(".speed");function y(){a=m.value,d=h.value,p=s(a,d),e(u,p,f)}function b(){t=!1,l.innerHTML="Start",clearInterval(o)}h.value=d,m.value=a,document.querySelector(".minusColumns").addEventListener("click",(()=>{d--,h.value=d,p=s(a,d),e(u,p,f)})),document.querySelector(".plusColumns").addEventListener("click",(()=>{d++,h.value=d,p=s(a,d),e(u,p,f)})),document.querySelector(".minusRows").addEventListener("click",(()=>{a--,m.value=a,p=s(a,d),e(u,p,f),console.log(p)})),document.querySelector(".plusRows").addEventListener("click",(()=>{a++,m.value=a,p=s(a,d),e(u,p,f)})),document.querySelector(".enterSize").addEventListener("click",(()=>{y()})),document.querySelector(".clear").addEventListener("click",(()=>{y()})),document.querySelector(".minusSpeed").addEventListener("click",(()=>{c+=500,i-=500,v.textContent=i/1e3})),document.querySelector(".plusSpeed").addEventListener("click",(()=>{c-=500,i+=500,v.textContent=i/1e3})),l.addEventListener("click",(()=>{t?b():(t=!0,l.innerHTML="Stop",o=setInterval((()=>{p=function(e){return e.map(((n,t)=>n.map(((n,o)=>{const c=function(e,n,t){let o=0;for(let c=e-1;c<=e+1;c+=1)o+=Number(r(t,c,n-1));for(let c=e-1;c<=e+1;c+=1)o+=Number(r(t,c,n+1));return o+=Number(r(t,e-1,n)),o+=Number(r(t,e+1,n)),o}(o,t,e),i=r(e,o,t);var d;return 3===(d=c)?1:d>3||d<2?0:2===d&&1===i?1:0}))))}(p),e(u,p,f),function(e){for(let r=0;r<e.length;r+=1){const n=e[r];for(let e=0;e<n.length;e+=1)if(n[e])return!0}return!1}(p)||(alert("Death on the block"),b())}),c))}))}(n)}},t={};function o(e){var r=t[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var c=t[e]={exports:{}};try{var i={id:e,module:c,factory:n[e],require:o};o.i.forEach((function(e){e(i)})),c=i.module,i.factory.call(c.exports,c,c.exports,i.require)}catch(e){throw c.error=e,e}return c.exports}o.m=n,o.c=t,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"a733fb2052876ffb7b20",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="gameoflife:",o.l=(n,t,c,i)=>{if(e[n])e[n].push(t);else{var d,a;if(void 0!==c)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var s=u[l];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==r+c){d=s;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,o.nc&&d.setAttribute("nonce",o.nc),d.setAttribute("data-webpack",r+c),d.src=n),e[n]=[t];var p=(r,t)=>{d.onerror=d.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],d.parentNode&&d.parentNode.removeChild(d),o&&o.forEach((e=>e(t))),r)return r(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),a&&document.head.appendChild(d)}},(()=>{var e,r,n,t={},c=o.c,i=[],d=[],a="idle",u=0,l=[];function s(e){a=e;for(var r=[],n=0;n<d.length;n++)r[n]=d[n].call(null,e);return Promise.all(r).then((function(){}))}function p(){0==--u&&s("ready").then((function(){if(0===u){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return s("check").then(o.hmrM).then((function(n){return n?s("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,c){return o.hmrC[c](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?m(e):s("ready").then((function(){return t}))},0===u?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):s(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return s("abort").then((function(){throw o[0]}));var c=s("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var i,d=s("apply"),a=function(e){i||(i=e)},u=[];return t.forEach((function(e){if(e.apply){var r=e.apply(a);if(r)for(var n=0;n<r.length;n++)u.push(r[n])}})),Promise.all([c,d]).then((function(){return i?s("fail").then((function(){throw i})):n?m(e).then((function(e){return u.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):s("idle").then((function(){return u}))}))}function v(){if(n)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){n.forEach((function(n){o.hmrI[e](n,r)}))})),n=void 0,!0}o.hmrD=t,o.i.push((function(l){var m,v,y,b,g=l.module,E=function(r,n){var t=c[n];if(!t)return r;var o=function(o){if(t.hot.active){if(c[o]){var d=c[o].parents;-1===d.indexOf(n)&&d.push(n)}else i=[n],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),i=[];return r(o)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(o,l,d(l));return o.e=function(e,n){return function(e){switch(a){case"ready":s("prepare");case"prepare":return u++,e.then(p,p),e;default:return e}}(r.e(e,n))},o}(l.require,l.id);g.hot=(m=l.id,v=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=v.parents.slice(),e=y?void 0:m,o(m)},active:!0,accept:function(e,r,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._acceptedDependencies[e[t]]=r||function(){},b._acceptedErrorHandlers[e[t]]=n;else b._acceptedDependencies[e]=r||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._declinedDependencies[e[r]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=b._disposeHandlers.indexOf(e);r>=0&&b._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)})),s("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:f,apply:h,status:function(e){if(!e)return a;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var r=d.indexOf(e);r>=0&&d.splice(r,1)},data:t[m]},e=void 0,b),g.parents=i,g.children=[],i=[],l.require=E})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=n[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r,n,t,c,i=o.hmrS_jsonp=o.hmrS_jsonp||{792:0},d={};function a(r,n){return e=n,new Promise(((e,n)=>{d[r]=e;var t=o.p+o.hu(r),c=new Error;o.l(t,(e=>{if(d[r]){d[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading hot update chunk "+r+" failed.\n("+t+": "+o+")",c.name="ChunkLoadError",c.type=t,c.request=o,n(c)}}))}))}function u(e){function d(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var c=t.pop(),i=c.id,d=c.chain,u=o.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:d,moduleId:i};for(var l=0;l<u.parents.length;l++){var s=u.parents[l],p=o.c[s];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:d.concat([s]),moduleId:i,parentId:s};-1===r.indexOf(s)&&(p.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),a(n[s],[i])):(delete n[s],r.push(s),t.push({chain:d.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,r=void 0;var u={},l=[],s={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(o.o(n,f)){var h,m=n[f],v=!1,y=!1,b=!1,g="";switch((h=m?d(f):{type:"disposed",moduleId:f}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+g));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(f in s[f]=m,a(l,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,f)&&(u[f]||(u[f]=[]),a(u[f],h.outdatedDependencies[f]));b&&(a(l,[h.moduleId]),s[f]=p)}n=void 0;for(var E,w=[],_=0;_<l.length;_++){var k=l[_],I=o.c[k];I&&(I.hot._selfAccepted||I.hot._main)&&s[k]!==p&&!I.hot._selfInvalidated&&w.push({module:k,require:I.hot._requireSelf,errorHandler:I.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var c=n.pop(),d=o.c[c];if(d){var a={},s=d.hot._disposeHandlers;for(_=0;_<s.length;_++)s[_].call(null,a);for(o.hmrD[c]=a,d.hot.active=!1,delete o.c[c],delete u[c],_=0;_<d.children.length;_++){var p=o.c[d.children[_]];p&&(e=p.parents.indexOf(c))>=0&&p.parents.splice(e,1)}}}for(var f in u)if(o.o(u,f)&&(d=o.c[f]))for(E=u[f],_=0;_<E.length;_++)r=E[_],(e=d.children.indexOf(r))>=0&&d.children.splice(e,1)},apply:function(r){for(var n in s)o.o(s,n)&&(o.m[n]=s[n]);for(var t=0;t<c.length;t++)c[t](o);for(var i in u)if(o.o(u,i)){var d=o.c[i];if(d){E=u[i];for(var a=[],p=[],f=[],h=0;h<E.length;h++){var m=E[h],v=d.hot._acceptedDependencies[m],y=d.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),p.push(y),f.push(m)}}for(var b=0;b<a.length;b++)try{a[b].call(null,E)}catch(n){if("function"==typeof p[b])try{p[b](n,{moduleId:i,dependencyId:f[b]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[b],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[b],error:n}),e.ignoreErrored||r(n)}}}for(var g=0;g<w.length;g++){var _=w[g],k=_.module;try{_.require(k)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:k,module:o.c[k]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:n}),e.ignoreErrored||r(n)}}return l}}}self.webpackHotUpdategameoflife=(r,t,i)=>{for(var a in t)o.o(t,a)&&(n[a]=t[a],e&&e.push(a));i&&c.push(i),d[r]&&(d[r](),d[r]=void 0)},o.hmrI.jsonp=function(e,r){n||(n={},c=[],t=[],r.push(u)),o.o(n,e)||(n[e]=o.m[e])},o.hmrC.jsonp=function(e,d,l,s,p,f){p.push(u),r={},t=d,n=l.reduce((function(e,r){return e[r]=!1,e}),{}),c=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(s.push(a(e,f)),r[e]=!0):r[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,n){r&&o.o(r,e)&&!r[e]&&(n.push(a(e)),r[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(866)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,